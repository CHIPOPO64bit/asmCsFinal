
; The following file was generated by an external converter written by David 
; Keisar Schmidt, by using Regex
; All rights reserved


.286
IDEAL
MODEL small
STACK 100h

DATASEG

; headers
; #include <stdio.h>
; #include "modulo.h"
; #include "rsa.h"

; macros
_PUBLIC_KEY_FILE_OPEN db "The two streams below are N and e. from left \nto right you can find the digits in hex\n\n",'$'
_PRIVATE_KEY_FILE_OPEN db "The stream below is d. from left \nto right you can find the digits in hex\n\n",'$'
_OPEN_MSG db "Welcome to encryption decryption editor.\nFor generating \nkeys, press 'g'.\nFor encryption via an existing key, press 'e'.\nFor \ndecryption via an existing key, press 'd'.\nFor a brief description press \n'b'.\nFor exit, press 'q'.\nPlease Enter g/e/d/b/q: ",'$'
_QUIT_MESSAGE db "Hope you enjoyed the editor.",'$'
_USAGE_ERROR db "USAGE: <g for keys, e for encryption, d for \ndecryption, b for brief description>\n",'$'
_DESCRIPTION_MSG db "This is the encryption decryption big brother.\nWe \nuse RSA (miller rabin variation) in order to ensure your privacy.\nBe ware, \ngeneration of \nprimes is not an easy task and might take a couple of minuets.\n",'$'
_ENTER_DECRYPTION_MESSAGE db "Enter the path for the decryption key. \nNote, \nthis file must have \nbeen generated by the editor, or, at least be in the same format, \notherwise it won't work: ",'$'
_ENTER_ENCRYPTION_MSG db "Enter the path for the encryption key. Note, \nthis file must have \nbeen generated by the editor, or, at least be in the same format, \notherwise it won't work: ",'$'
_DATA_FILE_MESSAGE db "Please enter path for the data file",'$'
_SAVE_FILE_MESSAGE db "Please enter the path for the encrypted file",'$'
_ENCRYPTED_FILE db "Please enter path for the encrypted file",'$'
_DECRYPTED_FILE db "Please enter the path for the decrypted file",'$'
_MAX_PATH_SIZE equ 100d
_MAX_LINE_LENGTH equ 200d

CODESEG

; Docs
; * get path from user and store the result in path
; void get_path(char *path)
proc get_path
	pusha
	popa
	ret
endp get_path

; Docs
; * write key to file
; void _write_key(FILE *file, const Number *key)
proc _write_key
	pusha
	popa
	ret
endp _write_key

; Docs
; * write public key to file
; void _write_public_key(FILE *file, const Number *N, const Number *e)
proc _write_public_key
	pusha
	popa
	ret
endp _write_public_key

; Docs
; * write private key to file
; void _write_private_key(FILE *file, const Number *N, const Number *d)
proc _write_private_key
	pusha
	popa
	ret
endp _write_private_key

; Docs
; * handler generate keys request
; void _handle_generate_keys()
proc _handle_generate_keys
	pusha
	popa
	ret
endp _handle_generate_keys

; Docs
; * convert character to integer representation
; char convert_to_value(char value)
proc convert_to_value
	pusha
	popa
	ret
endp convert_to_value

; Docs
; * read key from line and store the result in key
; void _read_key(const char *line, Number *key)
proc _read_key
	pusha
	popa
	ret
endp _read_key

; Docs
; * read encryption file (keys) and store the result N and e
; void _read_encryption_file(FILE *key_file, Number *N, Number *e)
proc _read_encryption_file
	pusha
	popa
	ret
endp _read_encryption_file

; Docs
; * open file and check validation
; * @return 0 if failed, 1 otherwise
; int _open_file(FILE **file, const char *msg, const char *mode)
proc _open_file
	pusha
	popa
	ret
endp _open_file

; Docs
; * write data to file
; void _write_data(FILE *file, const Number *data)
proc _write_data
	pusha
	popa
	ret
endp _write_data

; Docs
; * write encrypted data
; void _write_decrypted(FILE *file, const Number *data)
proc _write_decrypted
	pusha
	popa
	ret
endp _write_decrypted

; Docs
; * encrypt data and write the result to ecnrypted file
; * @param N modulus
; * @param e power
; void _encrypt(FILE *data, FILE *encrypted, const Number *N, const Number *e)
proc _encrypt
	pusha
	popa
	ret
endp _encrypt

; Docs
; * handle encrypt request
; void _handle_encrypt()
proc _handle_encrypt
	pusha
	popa
	ret
endp _handle_encrypt

; Docs
; * decrypt encrypted file and write result to decrypted file
; * @param N modulus
; * @param d power
; void _decrypt(FILE *encrypted, FILE *decrypted, const Number *N, const Number*d)
proc _decrypt
	pusha
	popa
	ret
endp _decrypt

; Docs
; * handle decrypt request
; void _handle_decrypt()
proc _handle_decrypt
	pusha
	popa
	ret
endp _handle_decrypt

; Docs
; * handle description request
; void _handle_description()
proc _handle_description
	pusha
	popa
	ret
endp _handle_description

; Docs
; * request handler
; * @param ctrl
; void _handle_request(const char ctrl)
proc _handle_request
	pusha
	popa
	ret
endp _handle_request

; Docs; int main()
proc main
	pusha
	popa
	ret
endp main


start:
    mov ax, @data
    mov ds, ax

    
exit:
    mov ax, 4c00h
    int 21h
END start

