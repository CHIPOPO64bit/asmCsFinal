import regex
C_MSG = """
; The following file was generated by an external converter written by David 
; Keisar Schmidt, by using Regex
; All rights reserved


"""
OPEN_ASM_FILE = """
.286
IDEAL
MODEL small
STACK 100h

DATASEG

"""
END_ASM_FILE ="""
start:
    mov ax, @data
    mov ds, ax
    
exit:
    mov ax, 4c00h
    int 21h
END start
"""

ARGS_MACROS = """
arg1 equ [bp+4]
arg2 equ [bp+6]
arg3 equ [bp+8]
arg4 equ [bp+10]
arg5 equ [bp+12]
lcl1 equ [bp-2]
lcl2 equ [bp-4]
lcl3 equ [bp-6]
lcl4 equ [bp-8]
"""
class Parser():
    def __init__(self, path):
        self.__path = path
        with open(path, "r") as f:
            self.__data = f.read()
        self.__result = OPEN_ASM_FILE
        self.__parse_includes()
        self.__parse_macros()
        self.__parse_function_declaration()
        self.__result += END_ASM_FILE


    def write(self):
        pattern  = "([\w]*)\."
        p = regex.compile(pattern)
        res = p.findall(self.__path)
        out_path = res[0]
        with open(out_path+".asm", "w") as file:
            file.write(C_MSG)
            file.write(self.__result)

    def __parse_includes(self):
        pattern = "#include [<\"][A-Za-z.]+[>\"]"
        p = regex.compile(pattern)
        m = p.findall(self.__data)
        self.__result += "; headers\n"
        for include in m:
            self.__result += "; " + include + "\n"
        self.__result += "\n"

    def __parse_macros(self):
        pattern = "(#define[ ]+([\w]+)[ ]+([\d]+|(\"([^\"]+[\\]*[\n]?)+\")))"
        p = regex.compile(pattern)
        m = p.findall(self.__data)
        self.__result += "; macros\n"
        for define in m:

            name = define[1]
            value = define[2]
            if value[0] == "\"":

                self.__result += name + " db " + value.replace("\\\n",
                                                               "\\n")\
                                 +",'$'\n"
            else:
                self.__result += name + " equ " + value + "d\n"

        self.__result += "\n"+ARGS_MACROS+"\n"

    def __parse_function_declaration(self):
        pattern = "((/\*\*([^/]*\n?\*?)*\*/)* *\n*((void|int|char|long) +([" \
                  "\w]+)\((" \
                  "([" \
                  "^\(" \
                  "\)]*\n?)*)\))(;|{| ))"
        p = regex.compile(pattern)
        m = p.findall(self.__data)

        self.__result += "CODESEG\n\n"
        for func in m:
            docs = func[1]
            decl = func[3]
            name = func[5]
            self.__result += "; Docs"
            self.__result += docs.replace("/**", "").replace(" */",
                                                             "").replace(
                " *", "; *")
            self.__result += "; " + decl.replace("\n", "").replace("\t",
                                                                      "")+"\n"
            self.__result += "proc " \
                             ""+name+"\n"+"\tpusha\n\tmov bp, sp\n\tsub sp, " \
                                          "8\n\tadd sp, 8\n" \
                                          "\tpopa\n\tret\n"+"endp "+name
            self.__result += "\n\n"

    def __parse_function_declarations(self):
        pass

    def __str__(self):
        return self.__result


def main():
    p = Parser("modulo.h")
    p.write()


if __name__ == "__main__":
    main()
